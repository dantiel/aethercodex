# 🌌 HERMETIC PROJECT TODO

## 🏛️ CORE ARCHITECTURAL PILLARS (Language Agnostic)

### 🔮 AI INTEGRATION & REASONING
✔︎ AI Connection @done(27-07-2025 19:14)
✔︎ Reasoning-Model Tool Integration @done(12-08-2025 20:53)
✔︎ Add Reasoning Content @done(27-07-2025 19:11)
◯ investigate about pair programming techniques

### 📁 FILE & MEMORY SYSTEMS
✔︎ Basic File Operations @done(27-07-2025 19:11)
✔︎ Mnemosyne Memory System @done(12-08-2025 20:52)
✔︎ File Overview & Symbolic Analysis @done(09-08-2025 13:51)
◯ improve symbolic analysis
◯ mnemosyne memory truncation should be longer, it has to be possible to retrieve complete memories, otherwise when creating memories that are too long there should be an error message
  
### 🛠️ TOOLING & COMMANDS
✔︎ Allow Safe Commands @done(27-07-2025 19:12)
✔︎ replace pygments by rouge @done(29-07-2025 23:52)
✔︎ add instrument: temp_create_file. this action creates a file for use as a temporary script or utility that isnt supposed to be part of the project but for the ai handling. it will be automatically cleaned up after termination or request. @done(17-09-2025 00:35)
◯ when the max tool calls commands are exceeded, instead of finishing the call, make a button that requires proceed so its not disrupted.
◯ make a (very short) overview  about last tools calls
◯ add a button to "pause" the current execution rather than stopping it, in in this state some arbitrary information and hints and additional requirements may be added by the user as prompt.
◯ stop button should also log the current output to history.
◯ allow edit of previous message to create new prompt and history starting point

### 🌐 UI & INTEGRATION
✔︎ TextMate Integration @done(09-08-2025 13:51)
✔︎ Basic Website for GitHub.io @done(27-07-2025 19:18)
◯ Make Contextmenu command for listing, selecting and starting tasks via shortcut
◯ make more commands that use the (numbered) context menu

## 🎯 ACTIVE DEVELOPMENT FOCUS

### 🔧 CORE INFRASTRUCTURE
◯ Task Engine & Automation
    ✔︎ Task UI polishing @done(17-09-2025 00:45)
        ✔︎ when task UI is minimized show a compact version that displays only phase, progressbar and title @done(17-09-2025 00:45)
    ◯ Create/edit tasks from user prompts
        ✔︎ Create Task Works @done(07-09-2025 16:03)
        ◯ Update Tasks
    ◯ when task step is rejected, use reasoning to estimate why it failed (maybe not necessary automatically, this may be hinted by additional prompt for the model to execute when it thinks its needed)
        ◯ use the reasoning output to create notes of rejected steps like "lessons learned"
    ◯ Generate detailed execution plans
    ✔︎ Instead of Loop execution, the tasks should use the tool reject and finalize a task step @done(30-09-2025 01:31)
    ◯ Pause and add remarks during execution
    ◯ improve inner task communication: more internal context. use description field. update inner todo list etc.
    ◯ when conjuration reasoning was called it should be part of the step complete or reject message... in general more context is needed, there is too much context loss between phases, how to avoid context bloat? like notes --- lazy context loading with truncated excerpts. store history, commands and reasoning outputs inbetween but load them across steps only on demand... when there were too many toolcalls maybe forget some of them?

◯ Error Handling & Rollback
    ◯ Syntax validation for created/patched files
    ◯ Automatic rollback on validation failure
    ◯ Git stash-based rollback system
    ◯ Error history tracking

◯ Dynamic Configuration
    ✔︎ Aegis state management with temperature parameters @done(17-09-2025 00:42)
    ✔︎ Dynamic temperature in task execution @done(17-09-2025 00:42)
    ◯ Multiple Aegis state preservation

### 🌐 ADVANCED INTEGRATION
◯ File Browser Actions
    ◯ AI actions in file browser context menus
    ◯ when a file is renamed or deleted, update its references in notes

◯ Real-time Command Output
    ◯ Real-time streaming to HorologiumAeternum

◯ Unsafe Command Confirmation
    ◯ Risk mitigation for advanced operations

◯ TextMate Marks Integration
    ◯ Line-based tooltips for AI annotations
    ◯ Error highlighting and syntax validation markers
    ◯ Task progress and architecture guidance marks
    ◯ Code quality and security vulnerability indicators
    ◯ Cross-reference points between files
    ◯ Bookmark integration for persistence

◯ Configuration Options
    ✔︎ System prompt customization via .aethercodex/.tm-properties @done(30-09-2025 01:29)
    ◯ Task system step configuration
    ✔︎ Allowed commands configuration @done(30-09-2025 01:29)

### 🔮 HERMETIC ENHANCEMENTS
◯ Symbolic Code Analysis
    ✔︎ Language-agnostic pattern recognition @done(30-09-2025 01:29)
    ✔︎ Hermetic symbol extraction (elemental, planetary, alchemical) @done(30-09-2025 01:29)
    ◯ Symbolic operations and mystical pattern forecasting

◯ Astral Projection (Multi-File Context)
    ◯ Cross-file reasoning and navigation
    ◯ Consciousness threading across files
    ◯ combine mnemosyne with code coverage system

◯ Ritualistic Command Sequences
    ◯ Straightforward way to define project specific commands
    ◯ support template engines like Yeoman, Cookiecutter, Nx/Angular schematics, Hygen, Plop.js
    ◯ support or integrate rewriting systems like OpenRewrite “recipes,” jscodeshift codemods, Comby "structural edits"
    ◯ combine those patterns with AI planning, test-impact gates, tracker/VCS approvals, and an auditable Chronicle, then lets users “Save as Blueprint” and batch-replay across many repos. That’s the wedge for ÆtherCodex.
    ◯ ability to create commands that are automatically integrated as textmate actions
    ◯ Complex workflow automation patterns
    ◯ Elemental-aligned command execution

◯ Secure Code Oracles
    ◯ Vulnerability prediction and prevention
    ◯ Quantum security analysis

◯ Divination Mode
    ◯ Symbolic behavior forecasting
    ◯ Code evolution prediction

◯ Alchemical Transmutation
    ◯ Code paradigm transformation
    ◯ Elemental recomposition

### 📚 DOCUMENTATION & UX
◯ Safe Commands API Documentation
    ◯ Comprehensive usage guidelines

◯ Esoteric Documentation
    ◯ Hidden/arcane feature guides

◯ Alchemical Symbol Integration
    ◯ Visual hierarchy with symbolic elements

◯ User Intervention System
    ◯ Pause and add remarks during AI execution
    ◯ Mark-based intervention points

## ✅ COMPLETED BUT UNMARKED
✔︎ File Renaming Symbolism (argonaut.rb, mnemosyne.rb, oracle.rb)
✔︎ Hermetic Memory Operations (Mnemosyne enhancements)
✔︎ Divinatory Methods (Oracle logic improvements)
✔︎ Multi-file Context System (Astral projection)
✔︎ Metaprogramming Utils (Language transformation foundation)

## 🎨 AESTHETIC & SYMBOLISM
✔︎ Theme based on Textmate's Argonaut-Theme @done(27-08-2025 16:43)
◯ Support more Themes
◯ Hermetic Symbolism Integration
◯ Elemental Color Themes (Fire, Water, Air, Earth)
◯ Typography & Visual Harmony Research
◯ Testimonials & Community Feedback

## Bugs
✔︎ double quotes at line endings get removed in patches. @done(04-09-2025 04:34)